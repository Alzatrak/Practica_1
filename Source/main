# Importem llibreries

from datetime import datetime
import pandas as pd
import requests
import re
from bs4 import BeautifulSoup

# Apliquem opció de dos decimals al data
pd.set_option('display.float_format', lambda x: '%.2f' % x)

# Generem la data que posteriorment aplicarem al nom del dataset
fecha=datetime.now()

# Modifica user agent
headers = {'User-Agent': 'Mozilla/5.0'}

# Generem input per a que l'usuari apliqui la població desitjada
URL_town = input('Quina població desitjes cercar? ')

# Generem dataframe
df = pd.DataFrame()

# Generem llistes buides amb les variables que ens generarà el codi
type_list = []
price_list = []
size_list = []
bath_list = []
room_list = []

# Muntem loop que anirà buscant en les pàgines web les variables i els afegirà a la llista
for i in range(5000):
    URL_habitaclia = 'https://www.habitaclia.com/viviendas-'
    URL_town = re.sub(" ","_", URL_town)
    URL_final = '-' + str(i) + '.html'
    URL_total = URL_habitaclia + URL_town + URL_final
    response = requests.get(URL_total)
    soup = BeautifulSoup(response.text, "html.parser")
    check = soup.findAll('div', attrs={"class":"list-no-result-title"})
    check = str(check)
    if re.search('No', check):
        break;
    else:
        item_content_first = soup.findAll('section', attrs={"class":"list-item-content"})
        item_content_second = soup.find_all('section', attrs={"class":"list-item-content-second"})
        for element in item_content_second:
            preu = element.findAll('span', attrs={"class":"font-2"})
            preu = str(preu)
            preu = re.search('>(.+?) €<', preu)
            try:
                price_list.append(preu.group(1))
            except AttributeError:
                price_list.append(preu)

        for element in item_content_first:
            
            title = element.findAll('a', href=True)
            title = str(title)
            title = re.search('title=["](.+?)["]>', title)
            try:
                title = re.search('(.+?)[" "]', title.group(1))
            except AttributeError:
                title = re.search('(.+?)[" "]', str(title))
            try:
                type_list.append(title.group(1))
            except AttributeError:
                type_list.append(title)
            size = element.findAll('p', attrs={"class":"list-item-feature"})
            size = str(size)
            try:
                size = re.search('[0-9]+m', size).group(0)
            except AttributeError:
                size = re.search('[0-9]+m', size)
            try:  
                size = re.search('[0-9]+', str(size)).group(0)
            except AttributeError:
                size = re.search('[0-9]+', str(size))
            size_list.append(size)
            room = element.findAll('p', attrs={"class":"list-item-feature"})
            room = str(room)
            room = re.search('[0-9][" "]hab', room)
            if room: 
                room = re.search('[0-9]+[" "]', room.group(0)).group(0)
            else:
                room = "0"
            room_list.append(room)
            bath = element.findAll('p', attrs={"class":"list-item-feature"})
            bath = str(bath)
            bath = re.search('[0-9][" "]baño', bath)
            if bath: 
                bath = re.search('[0-9]+[" "]', bath.group(0)).group(0)
                bath_list.append(bath)
            else:
                bath = "0"
                bath_list.append(bath)

# Generem el data amb les columnes igual a les llistes anteriorment completades.
df = df.assign(type=type_list,size=size_list, price=price_list, rooms=room_list, baths=bath_list)

# Generem el document csv amb el format de població + data +.csv
df.to_csv((str(URL_town)+"_"+format(fecha.strftime("%Y%m%d"))+".csv"), index=True)
